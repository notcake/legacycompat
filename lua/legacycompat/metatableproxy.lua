LegacyCompat.WrappedObjects = LegacyCompat.WeakTable ()LegacyCompat.ObjectWrappers = LegacyCompat.WeakTable ()local metatables = {}function LegacyCompat.GetProxy (metatableName)	if not metatables [metatableName] then		local mt = {}		metatables [metatableName] = mt				mt.__index = function (self, name)			local v = nil			local mt = LegacyCompat.R [metatableName]			while mt do				if mt [name] then					v = mt [name]					break				end				mt = LegacyCompat.R [mt.__base]			end			if not v and			   LegacyCompat.WrappedObjects [self] and			   LegacyCompat.WrappedObjects [self] [name] then				v = LegacyCompat.WrappedObjects [self] [name]			end			if type (v) == "function" then				if not LegacyCompat.ObjectWrappers [v] then					LegacyCompat.SetObjectWrapper (v,						function (self, ...)							return v (LegacyCompat.WrappedObjects [self] or self, ...)						end					)				end							end			return LegacyCompat.ObjectWrappers [v] or v		end		mt.__newindex = function (self, name, v)			LegacyCompat.WrappedObjects [self] [name] = LegacyCompat.WrappedObjects [v] or v		end		mt.__tostring = function (self)			return tostring (LegacyCompat.WrappedObjects [self])		end	end	return metatables [metatableName]endfunction LegacyCompat.GetType (object)	return LegacyCompat.WrappedObjects [object] and type (LegacyCompat.WrappedObjects [object]) or type (object)endfunction LegacyCompat.GetObjectWrapper (object)	return LegacyCompat.ObjectWrappers [object]endfunction LegacyCompat.GetWrappedObject (wrapper)	return LegacyCompat.WrappedObjects [wrapper]endfunction LegacyCompat.ProxyArrayFunction (f, metatableName)	return function (...)		local t = table.Copy (f (...))		for k, v in pairs (t) do			t [k] = LegacyCompat.WrapObject (v, metatableName)		end		return t	endendfunction LegacyCompat.ProxyFunction (f, metatableName)	return function (...)		return LegacyCompat.WrapObject (f (...), metatableName)	endendfunction LegacyCompat.SetObjectWrapper (object, wrapper)	LegacyCompat.WrappedObjects [wrapper] = object	LegacyCompat.ObjectWrappers [object] = wrapperendfunction LegacyCompat.SetWrappedObject (wrapper, object)	LegacyCompat.WrappedObjects [wrapper] = object	LegacyCompat.ObjectWrappers [object] = wrapperendfunction LegacyCompat.WrapObject (object, metatableName)	if not LegacyCompat.ObjectWrappers [object] then		local t = {}		setmetatable (t, LegacyCompat.GetProxy (metatableName or type (object)))		LegacyCompat.SetObjectWrapper (object, t)	end	return LegacyCompat.ObjectWrappers [object]end