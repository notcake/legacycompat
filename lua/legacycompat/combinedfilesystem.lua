local self = {}LegacyCompat.CombinedFileSystem = LegacyCompat.MakeConstructor (self, LegacyCompat.IFileSystem)function self:ctor ()	self.BaseLuaPath        = "lua/"	self.BasePath           = ""	self.VirtualBaseLuaPath = nil	self.VirtualBasePath    = nilendfunction self:Exists (path, lua)	for _, fileSystem in ipairs (LegacyCompat.FileSystems) do		if fileSystem:Exists (path, lua) then return true end	end	return falseendfunction self:Find (path, lua)	local fileSet = {}		for _, fileSystem in ipairs (LegacyCompat.FileSystems) do		for _, v in ipairs (fileSystem:Find (path, lua)) do			fileSet [v] = true		end	end		local files = {}	for k, _ in pairs (fileSet) do		files [#files + 1] = k	end		return filesendfunction self:IsFolder (path, lua)	for _, fileSystem in ipairs (LegacyCompat.FileSystems) do		if fileSystem:Exists (path, lua) then return true end	end	return falseendfunction self:Read (path, lua)	for _, fileSystem in ipairs (LegacyCompat.FileSystems) do		local data = fileSystem:Read (path, lua)		if data then return data end	end	return nilendfunction self:ToString ()	return "[CombinedFileSystem]"endLegacyCompat.CombinedFileSystem = LegacyCompat.CombinedFileSystem ()