local debug = {}LegacyCompat.G.debug = debugfunction debug.getinfo (f, ...)	f = LegacyCompat.GetWrappedFunction (f) or f	local info = _G.debug.getinfo (f, ...)	return infoenddebug.getmetatable = _G.debug.getmetatablefunction debug.getupvalue (f, n, ...)	f = LegacyCompat.GetWrappedFunction (f) or f	local upvalues = LegacyCompat.GetFunctionUpvalues (f)	if upvalues then		if upvalues [n] then			return upvalues [n] [1], upvalues [n] [2]		else			return nil, nil		end	end	return _G.debug.getupvalue (f, n, ...)endfunction debug.getfenv (f, ...)	f = LegacyCompat.GetWrappedFunction (f) or f	local env = _G.debug.getfenv (f, ...)	return LegacyCompat.GetWrappedObject (env) or envendfunction debug.getregistry ()	return LegacyCompat.Rendfunction debug.setupvalue (f, ...)	f = LegacyCompat.GetWrappedFunction (f) or f	return _G.debug.setupvalue (f, ...)endfunction debug.setmetatable (t, mt)	return _G.debug.setmetatable (t, mt)endLegacyCompat.G.getmetatable = debug.getmetatableLegacyCompat.G.setmetatable = debug.setmetatable